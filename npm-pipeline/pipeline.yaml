apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: npm-pipeline
  namespace: tekton-resources
spec:
  workspaces:
      - name: ssh-creds
      - name: app-pvc
      - name: argo-pvc
  params:
  - name: dev-repo-url
    description: Git url for python application code containing containerfile
  - name: dev-depl-url
    description: Git url for openshift deployment manifest repository
  - name: context-path
    description: Context path within application and deployment repository
  - name: image-name
    description: image name with registry
  - name: yq-select
    description: the yq select statement to identify the image field in a K8S manifest or helm values file
  - name: yq-target
    description: path to the file the yq statement should get executed
  - name: dockerfile
    description: path to the dockerfile
    default: ./Dockerfile
  - name: target-branch
    description: target branch for the deployment repository
  - name: source-branch
    description: source branch
  tasks:

  - name: clone-repo-app
    workspaces:
      - name: ssh-directory
        workspace: ssh-creds
      - name: output
        workspace: app-pvc
    params:
      - name: url
        value: $(params.dev-repo-url)
      - name: revision
        value: $(params.source-branch)
    taskRef:
      resolver: hub
      params:
      - name: catalog # optional
        value: tekton-catalog-tasks
      - name: type # optional
        value: artifact
      - name: kind
        value: task
      - name: name
        value: git-clone
      - name: version
        value: "0.9"

  - name: npm-install
    runAfter:
      - clone-repo-app
    workspaces:
      - name: source
        workspace: app-pvc
    params:
      - name: command
        value: install
    taskRef:
      resolver: cluster
      params:
      - name: kind
        value: task
      - name: name
        value: npm
      - name: namespace
        value: tekton-resources

  - name: npm-run-format
    runAfter:
      - npm-install
    workspaces:
      - name: source
        workspace: app-pvc
    params:
      - name: command
        value: run format
    taskRef:
      resolver: cluster
      params:
      - name: kind
        value: task
      - name: name
        value: npm
      - name: namespace
        value: tekton-resources

  - name: npm-run-lint
    runAfter:
      - npm-install
    workspaces:
      - name: source
        workspace: app-pvc
    params:
      - name: command
        value: run lint
    taskRef:
      resolver: cluster
      params:
      - name: kind
        value: task
      - name: name
        value: npm
      - name: namespace
        value: tekton-resources

  - name: npm-run-test
    runAfter:
      - npm-install
    workspaces:
      - name: source
        workspace: app-pvc
    params:
      - name: command
        value: run test
    taskRef:
      resolver: cluster
      params:
      - name: kind
        value: task
      - name: name
        value: npm
      - name: namespace
        value: tekton-resources

  - name: transform-timestamp-to-timestring
    runAfter:
      - clone-repo-app
    params:
      - name: timestamp
        value: "$(tasks.clone-repo-app.results.committer-date)"
    taskRef:
      resolver: cluster
      params:
      - name: kind
        value: task
      - name: name
        value: timestamp-to-timestring
      - name: namespace
        value: tekton-resources

  - name: clone-repo-deploy
    workspaces:
      - name: ssh-directory
        workspace: ssh-creds
      - name: source
        workspace: argo-pvc
    params:
      - name: GIT_SCRIPT
        value: |
          git clone $(params.dev-depl-url)
          cp -r $(basename $(params.dev-depl-url) .git)/. .
          rm -rf $(basename $(params.dev-depl-url) .git)
          chmod 777 -R .
    taskRef:
      resolver: hub
      params:
      - name: catalog # optional
        value: tekton-catalog-tasks
      - name: type # optional
        value: artifact
      - name: kind
        value: task
      - name: name
        value: git-cli
      - name: version
        value: "0.4"


  - name: update-prod-deployment-repo-using-yq
    runAfter:
      - clone-repo-deploy
      - transform-timestamp-to-timestring
    workspaces:
      - name: source
        workspace: argo-pvc
    params:
      - name: SCRIPT
        value: |
          yq -i '$(params.yq-select) = "$(params.image-name):$(tasks.transform-timestamp-to-timestring.results.time-string)-$(tasks.clone-repo-app.results.commit)"' prod/$(params.yq-target)
    taskRef:
      resolver: hub
      params:
      - name: catalog # optional
        value: tekton-catalog-tasks
      - name: type # optional
        value: artifact
      - name: kind
        value: task
      - name: name
        value: yq
      - name: version
        value: "0.4"
    when:
      - input: $(params.source-branch)
        operator: in
        values: ["main"]
      - input: $(params.target-branch)
        operator: in
        values: ["main"]

  - name: update-test-deployment-repo-using-yq
    runAfter:
      - clone-repo-deploy
      - transform-timestamp-to-timestring
    workspaces:
      - name: source
        workspace: argo-pvc
    params:
      - name: SCRIPT
        value: |
          yq -i '$(params.yq-select) = "$(params.image-name):$(tasks.transform-timestamp-to-timestring.results.time-string)-$(tasks.clone-repo-app.results.commit)"' test/$(params.yq-target)
    taskRef:
      resolver: hub
      params:
      - name: catalog # optional
        value: tekton-catalog-tasks
      - name: type # optional
        value: artifact
      - name: kind
        value: task
      - name: name
        value: yq
      - name: version
        value: "0.4"

  - name: build-and-push
    runAfter:
      - clone-repo-app
    workspaces:
      - name: source
        workspace: app-pvc
    params:
      - name: IMAGE
        value: $(params.image-name):$(tasks.transform-timestamp-to-timestring.results.time-string)-$(tasks.clone-repo-app.results.commit)
      - name: DOCKERFILE
        value: $(params.dockerfile)
    taskRef:
      resolver: cluster
      params:
      - name: kind
        value: task
      - name: name
        value: buildah
      - name: namespace
        value: tekton-resources

  - name: update-argo-repo
    runAfter:
      - build-and-push
      - npm-run-test
      - npm-run-lint
      - npm-run-format
      - update-prod-deployment-repo-using-yq
      - update-test-deployment-repo-using-yq
    workspaces:
      - name: ssh-directory
        workspace: ssh-creds
      - name: source
        workspace: argo-pvc
    params:
      - name: GIT_SCRIPT
        value: |
          git status
          git add -A
          git commit -m"update deployment to use image version $(tasks.transform-timestamp-to-timestring.results.time-string)-$(tasks.clone-repo-app.results.commit)"
          git push
      - name: GIT_USER_NAME
        value: "Openshift Pipeline Sevice Account"
      - name: GIT_USER_EMAIL
        value: pipeline@example.com
    taskRef:
      resolver: hub
      params:
      - name: catalog # optional
        value: tekton-catalog-tasks
      - name: type # optional
        value: artifact
      - name: kind
        value: task
      - name: name
        value: git-cli
      - name: version
        value: "0.4"