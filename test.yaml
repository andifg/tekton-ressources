apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  creationTimestamp: "2023-03-16T10:23:21Z"
  generateName: build-and-deploy-run-
  generation: 1
  labels:
    tekton.dev/pipeline: build-and-deploy
  name: build-and-deploy-run-vpcw6
  namespace: pipelines-tutorial
  resourceVersion: "154790"
  uid: 1cc58020-653b-4f45-90b6-3e454792fbd3
spec:
  params:
  - name: IMAGE
    value: image-registry.openshift-image-registry.svc:5000/pipelines-tutorial/pipelines-vote-api
  - name: deployment-name
    value: pipelines-vote-api
  - name: git-url
    value: https://github.com/openshift/pipelines-vote-api.git
  pipelineRef:
    name: build-and-deploy
  serviceAccountName: pipeline
  timeout: 1h0m0s
  workspaces:
  - name: shared-workspace
    volumeClaimTemplate:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        creationTimestamp: null
        name: source-pvc
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 500Mi
      status: {}
status:
  completionTime: "2023-03-16T10:26:28Z"
  conditions:
  - lastTransitionTime: "2023-03-16T10:26:28Z"
    message: 'Tasks Completed: 4 (Failed: 0, Cancelled 0), Skipped: 0'
    reason: Succeeded
    status: "True"
    type: Succeeded
  pipelineSpec:
    params:
    - description: name of the deployment to be patched
      name: deployment-name
      type: string
    - description: url of the git repo for the code of deployment
      name: git-url
      type: string
    - default: master
      description: revision to be used from repo of the code for deployment
      name: git-revision
      type: string
    - description: image to be build from the code
      name: IMAGE
      type: string
    tasks:
    - name: fetch-repository
      params:
      - name: url
        value: https://github.com/openshift/pipelines-vote-api.git
      - name: subdirectory
        value: ""
      - name: deleteExisting
        value: "true"
      - name: revision
        value: master
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
      - name: output
        workspace: shared-workspace
    - name: build-image
      params:
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/pipelines-tutorial/pipelines-vote-api
      runAfter:
      - fetch-repository
      taskRef:
        kind: ClusterTask
        name: buildah
      workspaces:
      - name: source
        workspace: shared-workspace
    - name: apply-manifests
      runAfter:
      - build-image
      taskRef:
        kind: Task
        name: apply-manifests
      workspaces:
      - name: source
        workspace: shared-workspace
    - name: update-deployment
      params:
      - name: deployment
        value: pipelines-vote-api
      - name: IMAGE
        value: image-registry.openshift-image-registry.svc:5000/pipelines-tutorial/pipelines-vote-api
      runAfter:
      - apply-manifests
      taskRef:
        kind: Task
        name: update-deployment
    workspaces:
    - name: shared-workspace
  startTime: "2023-03-16T10:23:21Z"
  taskRuns:
    build-and-deploy-run-vpcw6-apply-manifests:
      pipelineTaskName: apply-manifests
      status:
        completionTime: "2023-03-16T10:26:20Z"
        conditions:
        - lastTransitionTime: "2023-03-16T10:26:20Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: build-and-deploy-run-vpcw6-apply-manifests-pod
        startTime: "2023-03-16T10:25:57Z"
        steps:
        - container: step-apply
          imageID: image-registry.openshift-image-registry.svc:5000/openshift/cli@sha256:d9feb297a0007232cd124c9d0c94360b6ad35b81350b2b55469efc14fda48c72
          name: apply
          terminated:
            containerID: cri-o://c1a15d36f3ca1e7621d7cc50c6db4982c708e10e51453e9880faa8d4236ccdf6
            exitCode: 0
            finishedAt: "2023-03-16T10:26:19Z"
            reason: Completed
            startedAt: "2023-03-16T10:26:16Z"
        taskSpec:
          params:
          - default: k8s
            description: The directory in source that contains yaml manifests
            name: manifest_dir
            type: string
          steps:
          - args:
            - |-
              echo Applying manifests in k8s directory
              oc apply -f k8s
              echo -----------------------------------
            command:
            - /bin/bash
            - -c
            image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
            name: apply
            resources: {}
            workingDir: /workspace/source
          workspaces:
          - name: source
    build-and-deploy-run-vpcw6-build-image:
      pipelineTaskName: build-image
      status:
        completionTime: "2023-03-16T10:25:56Z"
        conditions:
        - lastTransitionTime: "2023-03-16T10:25:56Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: build-and-deploy-run-vpcw6-build-image-pod
        startTime: "2023-03-16T10:23:33Z"
        steps:
        - container: step-build-and-push
          imageID: registry.redhat.io/rhel8/buildah@sha256:7678ad61e06e442b0093ab73faa73ce536721ae523015dd942f9196c4699a31d
          name: build-and-push
          terminated:
            containerID: cri-o://26b52620f3e9e88f5f6c4cb808716694872a4cd5700ec17a64c137f829f43f23
            exitCode: 0
            finishedAt: "2023-03-16T10:25:56Z"
            message: '[{"key":"IMAGE_DIGEST","value":"sha256:6a7880dd322984cde9998c95eb531b4b1af312b5ad40195247fc48601dbf3151","type":1},{"key":"IMAGE_URL","value":"image-registry.openshift-image-registry.svc:5000/pipelines-tutorial/pipelines-vote-api\n","type":1}]'
            reason: Completed
            startedAt: "2023-03-16T10:23:44Z"
        taskResults:
        - name: IMAGE_DIGEST
          type: string
          value: sha256:6a7880dd322984cde9998c95eb531b4b1af312b5ad40195247fc48601dbf3151
        - name: IMAGE_URL
          type: string
          value: |
            image-registry.openshift-image-registry.svc:5000/pipelines-tutorial/pipelines-vote-api
        taskSpec:
          description: |-
            Buildah task builds source into a container image and then pushes it to a container registry.
            Buildah Task builds source into a container image using Project Atomic's Buildah build tool.It uses Buildah's support for building from Dockerfiles, using its buildah bud command.This command executes the directives in the Dockerfile to assemble a container image, then pushes that image to a container registry.
          params:
          - description: Reference of the image buildah will produce.
            name: IMAGE
            type: string
          - default: registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe
            description: The location of the buildah builder image.
            name: BUILDER_IMAGE
            type: string
          - default: vfs
            description: Set buildah storage driver
            name: STORAGE_DRIVER
            type: string
          - default: ./Dockerfile
            description: Path to the Dockerfile to build.
            name: DOCKERFILE
            type: string
          - default: .
            description: Path to the directory to use as context.
            name: CONTEXT
            type: string
          - default: "true"
            description: Verify the TLS on the registry endpoint (for push/pull to
              a non-TLS registry)
            name: TLSVERIFY
            type: string
          - default: oci
            description: The format of the built container, oci or docker
            name: FORMAT
            type: string
          - default: ""
            description: Extra parameters passed for the build command when building
              images.
            name: BUILD_EXTRA_ARGS
            type: string
          - default: ""
            description: Extra parameters passed for the push command when pushing
              images.
            name: PUSH_EXTRA_ARGS
            type: string
          - default: "false"
            description: Skip pushing the built image
            name: SKIP_PUSH
            type: string
          results:
          - description: Digest of the image just built.
            name: IMAGE_DIGEST
            type: string
          - description: Image repository where the built image would be pushed to
            name: IMAGE_URL
            type: string
          steps:
          - image: registry.redhat.io/rhel8/buildah@sha256:ac0b8714cc260c94435cab46fe41b3de0ccbc3d93e38c395fa9d52ac49e521fe
            name: build-and-push
            resources: {}
            script: |
              buildah --storage-driver=vfs bud \
                 --format=oci \
                --tls-verify=true --no-cache \
                -f ./Dockerfile -t image-registry.openshift-image-registry.svc:5000/pipelines-tutorial/pipelines-vote-api .

              [[ "false" == "true" ]] && echo "Push skipped" && exit 0

              if [[ "false" == "true" ]]; then

                # if config.json exists at workspace root, we use that
                if test -f "/config.json"; then
                  export DOCKER_CONFIG=""

                # else we look for .dockerconfigjson at the root
                elif test -f "/.dockerconfigjson"; then
                  cp "/.dockerconfigjson" "$HOME/.docker/config.json"
                  export DOCKER_CONFIG="$HOME/.docker"

                # need to error out if neither files are present
                else
                  echo "neither 'config.json' nor '.dockerconfigjson' found at workspace root"
                  exit 1
                fi
              fi

              buildah --storage-driver=vfs push \
                 --tls-verify=true \
                --digestfile /tmp/image-digest image-registry.openshift-image-registry.svc:5000/pipelines-tutorial/pipelines-vote-api \
                docker://image-registry.openshift-image-registry.svc:5000/pipelines-tutorial/pipelines-vote-api
              cat /tmp/image-digest | tee /tekton/results/IMAGE_DIGEST
              echo "image-registry.openshift-image-registry.svc:5000/pipelines-tutorial/pipelines-vote-api" | tee /tekton/results/IMAGE_URL
            securityContext:
              capabilities:
                add:
                - SETFCAP
            volumeMounts:
            - mountPath: /var/lib/containers
              name: varlibcontainers
            workingDir: /workspace/source
          volumes:
          - emptyDir: {}
            name: varlibcontainers
          workspaces:
          - name: source
          - description: An optional workspace that allows providing a .docker/config.json
              file for Buildah to access the container registry. The file should be
              placed at the root of the Workspace with name config.json or .dockerconfigjson.
            name: dockerconfig
            optional: true
    build-and-deploy-run-vpcw6-fetch-repository:
      pipelineTaskName: fetch-repository
      status:
        completionTime: "2023-03-16T10:23:33Z"
        conditions:
        - lastTransitionTime: "2023-03-16T10:23:33Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: build-and-deploy-run-vpcw6-fetch-repository-pod
        startTime: "2023-03-16T10:23:22Z"
        steps:
        - container: step-clone
          imageID: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:6c3980b3d28c8fb92b17466f5654d5f484ab893f1673ec8f29e49c0d03f8aca9
          name: clone
          terminated:
            containerID: cri-o://7a0877f4e064b87d448f3236769e10ac91fbd8b2416e333261f1126a21831d7f
            exitCode: 0
            finishedAt: "2023-03-16T10:23:32Z"
            message: '[{"key":"commit","value":"493b864eb4459ae21df53adc5bca7fb409bc8180","type":1},{"key":"url","value":"https://github.com/openshift/pipelines-vote-api.git","type":1}]'
            reason: Completed
            startedAt: "2023-03-16T10:23:30Z"
        taskResults:
        - name: commit
          type: string
          value: 493b864eb4459ae21df53adc5bca7fb409bc8180
        - name: url
          type: string
          value: https://github.com/openshift/pipelines-vote-api.git
        taskSpec:
          description: |-
            These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
            The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
          params:
          - description: Repository URL to clone from.
            name: url
            type: string
          - default: ""
            description: Revision to checkout. (branch, tag, sha, ref, etc...)
            name: revision
            type: string
          - default: ""
            description: Refspec to fetch before checking out revision.
            name: refspec
            type: string
          - default: "true"
            description: Initialize and fetch git submodules.
            name: submodules
            type: string
          - default: "1"
            description: Perform a shallow clone, fetching only the most recent N
              commits.
            name: depth
            type: string
          - default: "true"
            description: Set the `http.sslVerify` global git config. Setting this
              to `false` is not advised unless you are sure that you trust your git
              remote.
            name: sslVerify
            type: string
          - default: ca-bundle.crt
            description: file name of mounted crt using ssl-ca-directory workspace.
              default value is ca-bundle.crt.
            name: crtFileName
            type: string
          - default: ""
            description: Subdirectory inside the `output` Workspace to clone the repo
              into.
            name: subdirectory
            type: string
          - default: ""
            description: Define the directory patterns to match or exclude when performing
              a sparse checkout.
            name: sparseCheckoutDirectories
            type: string
          - default: "true"
            description: Clean out the contents of the destination directory if it
              already exists before cloning.
            name: deleteExisting
            type: string
          - default: ""
            description: HTTP proxy server for non-SSL requests.
            name: httpProxy
            type: string
          - default: ""
            description: HTTPS proxy server for SSL requests.
            name: httpsProxy
            type: string
          - default: ""
            description: Opt out of proxying HTTP/HTTPS requests.
            name: noProxy
            type: string
          - default: "true"
            description: Log the commands that are executed during `git-clone`'s operation.
            name: verbose
            type: string
          - default: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:6c3980b3d28c8fb92b17466f5654d5f484ab893f1673ec8f29e49c0d03f8aca9
            description: The image providing the git-init binary that this Task runs.
            name: gitInitImage
            type: string
          - default: /tekton/home
            description: |
              Absolute path to the user's home directory.
            name: userHome
            type: string
          results:
          - description: The precise commit SHA that was fetched by this Task.
            name: commit
            type: string
          - description: The precise URL that was fetched by this Task.
            name: url
            type: string
          steps:
          - env:
            - name: HOME
              value: /tekton/home
            - name: PARAM_URL
              value: https://github.com/openshift/pipelines-vote-api.git
            - name: PARAM_REVISION
              value: master
            - name: PARAM_REFSPEC
            - name: PARAM_SUBMODULES
              value: "true"
            - name: PARAM_DEPTH
              value: "1"
            - name: PARAM_SSL_VERIFY
              value: "true"
            - name: PARAM_CRT_FILENAME
              value: ca-bundle.crt
            - name: PARAM_SUBDIRECTORY
            - name: PARAM_DELETE_EXISTING
              value: "true"
            - name: PARAM_HTTP_PROXY
            - name: PARAM_HTTPS_PROXY
            - name: PARAM_NO_PROXY
            - name: PARAM_VERBOSE
              value: "true"
            - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
            - name: PARAM_USER_HOME
              value: /tekton/home
            - name: WORKSPACE_OUTPUT_PATH
              value: /workspace/output
            - name: WORKSPACE_SSH_DIRECTORY_BOUND
              value: "false"
            - name: WORKSPACE_SSH_DIRECTORY_PATH
            - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
              value: "false"
            - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
            - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
              value: "false"
            - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
            image: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:6c3980b3d28c8fb92b17466f5654d5f484ab893f1673ec8f29e49c0d03f8aca9
            name: clone
            resources: {}
            script: |
              #!/usr/bin/env sh
              set -eu

              if [ "${PARAM_VERBOSE}" = "true" ] ; then
                set -x
              fi


              if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
                cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
                chmod 400 "${PARAM_USER_HOME}/.git-credentials"
                chmod 400 "${PARAM_USER_HOME}/.gitconfig"
              fi

              if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                chmod 700 "${PARAM_USER_HOME}"/.ssh
                chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
              fi

              if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
                 export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
                 if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
                    export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
                 fi
              fi
              CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

              cleandir() {
                # Delete any existing contents of the repo directory if it exists.
                #
                # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
                # or the root of a mounted volume.
                if [ -d "${CHECKOUT_DIR}" ] ; then
                  # Delete non-hidden files and directories
                  rm -rf "${CHECKOUT_DIR:?}"/*
                  # Delete files and directories starting with . but excluding ..
                  rm -rf "${CHECKOUT_DIR}"/.[!.]*
                  # Delete files and directories starting with .. plus any other character
                  rm -rf "${CHECKOUT_DIR}"/..?*
                fi
              }

              if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
                cleandir
              fi

              test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
              test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
              test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

              /ko-app/git-init \
                -url="${PARAM_URL}" \
                -revision="${PARAM_REVISION}" \
                -refspec="${PARAM_REFSPEC}" \
                -path="${CHECKOUT_DIR}" \
                -sslVerify="${PARAM_SSL_VERIFY}" \
                -submodules="${PARAM_SUBMODULES}" \
                -depth="${PARAM_DEPTH}" \
                -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
              cd "${CHECKOUT_DIR}"
              RESULT_SHA="$(git rev-parse HEAD)"
              EXIT_CODE="$?"
              if [ "${EXIT_CODE}" != 0 ] ; then
                exit "${EXIT_CODE}"
              fi
              printf "%s" "${RESULT_SHA}" > "/tekton/results/commit"
              printf "%s" "${PARAM_URL}" > "/tekton/results/url"
            securityContext:
              runAsNonRoot: true
              runAsUser: 65532
          workspaces:
          - description: The git repo will be cloned onto the volume backing this
              Workspace.
            name: output
          - description: |
              A .ssh directory with private key, known_hosts, config, etc. Copied to
              the user's home before git commands are executed. Used to authenticate
              with the git remote when performing the clone. Binding a Secret to this
              Workspace is strongly recommended over other volume types.
            name: ssh-directory
            optional: true
          - description: |
              A Workspace containing a .gitconfig and .git-credentials file. These
              will be copied to the user's home before any git commands are run. Any
              other files in this Workspace are ignored. It is strongly recommended
              to use ssh-directory over basic-auth whenever possible and to bind a
              Secret to this Workspace over other volume types.
            name: basic-auth
            optional: true
          - description: |
              A workspace containing CA certificates, this will be used by Git to
              verify the peer with when fetching or pushing over HTTPS.
            name: ssl-ca-directory
            optional: true
    build-and-deploy-run-vpcw6-update-deployment:
      pipelineTaskName: update-deployment
      status:
        completionTime: "2023-03-16T10:26:28Z"
        conditions:
        - lastTransitionTime: "2023-03-16T10:26:28Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: build-and-deploy-run-vpcw6-update-deployment-pod
        startTime: "2023-03-16T10:26:20Z"
        steps:
        - container: step-patch
          imageID: image-registry.openshift-image-registry.svc:5000/openshift/cli@sha256:d9feb297a0007232cd124c9d0c94360b6ad35b81350b2b55469efc14fda48c72
          name: patch
          terminated:
            containerID: cri-o://840f6e47cd837c2ce73f9ece3ad7f0438faba98fa92e0edb21f4659b2548dd38
            exitCode: 0
            finishedAt: "2023-03-16T10:26:27Z"
            reason: Completed
            startedAt: "2023-03-16T10:26:26Z"
        taskSpec:
          params:
          - description: The name of the deployment patch the image
            name: deployment
            type: string
          - description: Location of image to be patched with
            name: IMAGE
            type: string
          steps:
          - args:
            - |-
              oc patch deployment pipelines-vote-api --patch='{"spec":{"template":{"spec":{
                "containers":[{
                  "name": "pipelines-vote-api",
                  "image":"image-registry.openshift-image-registry.svc:5000/pipelines-tutorial/pipelines-vote-api"
                }]
              }}}}'

              # issue: https://issues.redhat.com/browse/SRVKP-2387
              # images are deployed with tag. on rebuild of the image tags are not updated, hence redeploy is not happening
              # as a workaround update a label in template, which triggers redeploy pods
              # target label: "spec.template.metadata.labels.patched_at"
              # NOTE: this workaround works only if the pod spec has imagePullPolicy: Always
              patched_at_timestamp=`date +%s`
              oc patch deployment pipelines-vote-api --patch='{"spec":{"template":{"metadata":{
                "labels":{
                  "patched_at": '\"$patched_at_timestamp\"'
                }
              }}}}'
            command:
            - /bin/bash
            - -c
            image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
            name: patch
            resources: {}